{"version":3,"sources":["Memes/styles.module.css","MemeGenerated/styles.module.css","Memes/Meme.js","MemeGenerated/MemeGenerated.js","App/App.js","reportWebVitals.js","index.js"],"names":["module","exports","Meme","useState","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","useHistory","useEffect","fetch","then","res","json","_memes","data","array","i","length","j","Math","floor","random","temp","ShuffleMemes","Array","box_count","fill","console","log","className","styles","container","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","push","url","generate","skip","map","onChange","e","text","target","value","updateCaption","alt","src","MemeGenerated","copied","setCopied","clipboard","useClipboard","location","useLocation","URLSearchParams","search","get","home","copy","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9ebe71c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1k_MH\",\"skip\":\"styles_skip__RSVxP\",\"generate\":\"styles_generate__2tRGL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__38Ztw\",\"copy\":\"styles_copy__IKXB0\",\"home\":\"styles_home__2P03Q\"};","import React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { useHistory } from 'react-router-dom';\n\n\n\nexport const Meme = () => {\n\n    const [memes, setMemes] = useState([]);\n    const [memeIndex, setMemeIndex] = useState(0);\n    const [captions, setCaptions] = useState([]);\n\n    const history = useHistory();\n\n    const updateCaption = (e, index) => {\n        const text = e.target.value || '';\n        setCaptions(\n            captions.map((c, i) => {\n                if (index === i) {\n                    return text;\n                } else {\n                    return c;\n                }\n            })\n        );\n    };\n\n    const generateMeme = () => {\n        const currentMeme = memes[memeIndex];\n        const formData = new FormData();\n\n        formData.append('username', 'whtvrka');\n        formData.append('password', '0202122Ma');\n        formData.append('template_id', currentMeme.id);\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c))\n\n        fetch('https://api.imgflip.com/caption_image', {\n            method: 'POST',\n            body: formData\n        }).then(res => {\n            res.json().then(res => {\n                history.push(`/generated?url=${res.data.url}`);\n            })\n        });\n    };\n\n\n\n    const ShuffleMemes = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i);\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        };\n    };\n\n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes').then(res => {\n            res.json().then(res => {\n                const _memes = res.data.memes;\n                ShuffleMemes(_memes);\n                setMemes(_memes);\n            });\n        });\n    }, []);\n\n    useEffect(() => {\n        if (memes.length) {\n            setCaptions(Array(memes[memeIndex].box_count).fill(''));\n        }\n    }, [memeIndex, memes]);\n\n    useEffect(() => {\n        console.log(captions);\n    }, [captions]);\n    return (\n        memes.length ?\n            <div className={styles.container}>\n                <button onClick={generateMeme} className={styles.generate}>Generate</button>\n                <button onClick={() => setMemeIndex(memeIndex + 1)} className={styles.skip}>Skip</button>\n                {\n                    captions.map((c, index) => (\n                        <input onChange={(e) => updateCaption(e, index)} key={index}></input>\n                    ))\n                }\n                <img alt='meme' src={memes[memeIndex].url} />\n            </div> :\n            <> </>\n    );\n};\n\n\n","import React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport styles from './styles.module.css';\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport const MemeGenerated = () => {\n\n    const [copied, setCopied] = useState(false);\n\n    const clipboard = useClipboard();\n    const history = useHistory();\n    const location = useLocation();\n    const url = new URLSearchParams(location.search).get('url');\n\n    const copyLink = () => {\n        clipboard.copy(url);\n        setCopied(true);\n    };\n\n    return (\n        <div className={styles.container}>\n            <button onClick={() => history.push('/')} className={styles.home}>\n                Make More Memes\n        </button>\n            {url && <img alt='meme' src={url} />}\n            <button onClick={copyLink} className={styles.copy}>\n                {copied ? 'Link copied!' : 'Copy link'}\n            </button>\n        </div>\n    );\n}\n    ;\n\n","import React from 'react';\nimport { Meme } from '../Memes/Meme';\nimport { Switch, Route } from 'react-router-dom';\nimport {MemeGenerated} from '../MemeGenerated/MemeGenerated';\n\n\nexport const App = () => {\n  return (\n    <Switch>\n      <Route exact path='/'>\n        <Meme />\n      </Route>\n      <Route path='/generated'>\n        <MemeGenerated />\n      </Route>\n    </Switch>\n\n\n\n  );\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}